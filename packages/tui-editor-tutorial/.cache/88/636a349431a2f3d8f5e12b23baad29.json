{"id":"docs/guide.md","dependencies":[],"generated":{"html":"<h1 id=\"angular-템플릿-관리\">Angular 템플릿 관리</h1>\n<h2 id=\"table-of-contents\">Table of Contents</h2>\n<ul>\n<li><a href=\"#%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EC%84%B8%ED%8C%85\">개발환경 세팅</a><ul>\n<li><a href=\"#git\">Git</a></li>\n<li><a href=\"#nodejs\">NodeJS</a></li>\n<li><a href=\"#angular\">Angular</a></li>\n</ul>\n</li>\n<li><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\">시작하기</a><ul>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%A1%B0\">프로젝트 구조</a></li>\n<li><a href=\"#%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\">페이지 생성하기</a></li>\n<li><a href=\"#%EC%8A%A4%ED%83%80%EC%9D%BC-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\">스타일 적용하기</a></li>\n<li><a href=\"#%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\">애니메이션 적용하기</a></li>\n<li><a href=\"#%EB%9D%BC%EC%9A%B0%ED%84%B0%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%9D%B4%EB%8F%99%ED%95%98%EA%B8%B0\">라우터를 이용한 페이지 이동하기</a></li>\n</ul>\n</li>\n<li>[간단한 프로토타입](#간단한 프로토타입)</li>\n</ul>\n<h2 id=\"개발환경-세팅\">개발환경 세팅</h2>\n<h3 id=\"git\">Git</h3>\n<ul>\n<li><a href=\"#https://git-scm.com/\">Git</a></li>\n<li><a href=\"#https://www.sourcetreeapp.com/\">SourceTree</a></li>\n</ul>\n<p>소스 형상관리를 위해 설치합니다.\nGUI Tool <code>SourceTree</code>를 설치하시면, 더 쉽게 관리하실 수 있습니다.</p>\n<h3 id=\"nodejs\">NodeJS</h3>\n<ul>\n<li><a href=\"#https://nodejs.org/en/\">NodeJS 10.15.3 LTS</a></li>\n</ul>\n<p>NodeJS 페이지에서 <code>10.15.3 LTS</code> 버전을 다운 받아 설치합니다. 설치되면 아래와 같이 확인하실 수 있습니다.</p>\n<pre><code class=\"language-bash\">node -v\nv10.15.3\n\nnpm -v\n6.4.1</code></pre>\n<h3 id=\"angular\">Angular</h3>\n<ul>\n<li><a href=\"#https://angular.io/docs\">Angular Document</a></li>\n</ul>\n<p>Angular 프로젝트 관리 편의를 위해 <code>@angular/cli</code>를 글로벌로 설치합니다.\n<code>ng</code> 명령어를 실행하면, 이용 가능한 커맨드를 보실 수 있습니다.</p>\n<pre><code class=\"language-bash\">npm install -g @angular/cli\nng</code></pre>\n<h2 id=\"시작하기\">시작하기</h2>\n<p>프로젝트를 시작하기 위해서 GitLab 서버에 있는 프로젝트 Repository를 클론합니다.</p>\n<pre><code class=\"language-bash\">git clone angular-scaffolding</code></pre>\n<p>클론 후, 개발 서버 실행을 위해 프로젝트 root 폴더에서 node 모듈을 설치합니다.</p>\n<pre><code class=\"language-bash\">cd angular-scaffolding\n\n# 모듈 설치\nnpm install\n\n# 서버 실행\nnpm start</code></pre>\n<h3 id=\"프로젝트-구조\">프로젝트 구조</h3>\n<pre><code class=\"language-doc\">- app/                  --- 앱 로직, 데이터, 뷰 등\n  - constants/          --- 공통으로 쓰일 고정된 정보(메시지 프로퍼티 등)\n  - cross-cutting/      --- 페이지 변경 또는 데이터 통신 간에 인터셉터 로직\n  - data/               --- 데이터(모델, 셀렉터, 액션 등)\n  - presentation/       --- 뷰\n    - layout/           --- 뷰 레이아웃\n    - ui/               --- 뷰 공통 컴포넌트\n    - views/            --- 뷰 페이지\n  - utils/              --- 공통 유틸리티\n- assets/               --- 이미지, 폰트 등\n  - images/\n  - fonts/\n- environments/         --- 개발 및 프로덕션 환경\n  - environment.prod.ts --- 프로덕션 환경\n  - environment.ts      --- 개발 환경\n- main.ts               --- Entry Point\n- styles.scss           --- 글로벌 스타일</code></pre>\n<h3 id=\"부트스트랩\">부트스트랩</h3>\n<p>Angular를 실행했을 때, <code>angular.json</code> 파일에 <code>build.main</code>에 지정되어 있는 파일을 실행합니다.\n기본적으로 <code>src/main.ts</code> 파일로 설정되어있습니다.</p>\n<p><code>src/main.ts</code></p>\n<pre><code class=\"language-typescript\">import { enableProdMode } from &quot;@angular/core&quot;;\nimport { platformBrowserDynamic } from &quot;@angular/platform-browser-dynamic&quot;;\n\nimport { AppModule } from &quot;./app/app.module&quot;;\nimport { environment } from &quot;./environments/environment&quot;;\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch(err =&gt; console.error(err));</code></pre>\n<p><code>platformBrowserDynamic().bootstrapModule(AppModule)</code>를 보면 <code>AppModule</code>를 파라메타로 넘긴것을 볼수 있는데,\nangular가 <code>AppModule</code>을 부트스트랩한다는 것을 알 수 있습니다. 즉, <code>AppModule</code>이 서비스의 시작 지점이라는 것을 의미합니다.</p>\n<p><code>src/app/app.module.ts</code></p>\n<pre><code class=\"language-typescript\">import { BrowserModule } from &quot;@angular/platform-browser&quot;;\nimport { NgModule } from &quot;@angular/core&quot;;\n\nimport { AppRoutingModule } from &quot;./app-routing.module&quot;;\nimport { AppComponent } from &quot;./app.component&quot;;\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule, AppRoutingModule],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}</code></pre>\n<ul>\n<li>declarations : 컴포넌트, 디렉티브, 파이프를 사용하기 위해서, 모듈에 정의합니다. 사용하기 위한 컴포넌트, 디렉티브, 파이프가 모듈에 정의되어 있지 않으면, 모듈은 찾지 못하고, 에러를 발생시킵니다.</li>\n<li>imports : 의존성 있는 모듈을 정의합니다. 위에는 BrowserMdoule(브라우저와 관련된 모듈)과 AppRoutingModule에 의존하고 있습니다.</li>\n<li>providers : 서비스를 앱에서 사용할 수 있도록 주입하려면, 이곳에 추가되어야합니다.</li>\n<li>bootstrap : 모듈이 앱의 부트스트랩에 사용 될 때, 최상위 컴포넌트로 로드해야 한다는 것을 나타냅니다 .</li>\n</ul>\n<h3 id=\"페이지-생성하기\">페이지 생성하기</h3>\n<h4 id=\"모듈과-라우팅-파일-생성하기\">모듈과 라우팅 파일 생성하기</h4>\n<p><code>ng g module &lt;path&gt;</code> 명령어를 사용하여 module 파일을 생성할 수 있습니다.</p>\n<pre><code class=\"language-bash\">ng g module presentation/views/auth</code></pre>\n<p>위와 같은 명령어를 생성하면, 아래와 같은 파일이 생성된 것을 확인할 수 있습니다.\n<strong>뷰와 관련된 부분은 <code>presentation</code> 폴더에 위치합니다.</strong></p>\n<pre><code class=\"language-doc\">- app/presentation/views/auth\n  - auth.module.ts</code></pre>\n<p><code>routing</code> 파일과 함께 생성하고 싶다면, <code>--routing</code> 옵션과 함께 실행하시면 됩니다.</p>\n<pre><code class=\"language-bash\">ng g module presentation/views/auth --routing</code></pre>\n<p>Result:</p>\n<pre><code class=\"language-doc\">- app/presentation/views/auth\n  - auth.module.ts\n  - auth-routing.module.ts</code></pre>\n<p><code>app/presentation/views/auth/auth.module.ts</code></p>\n<pre><code class=\"language-typescript\">import { NgModule } from &quot;@angular/core&quot;;\nimport { Routes, RouterModule } from &quot;@angular/router&quot;;\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule {}</code></pre>\n<p><code>app-routing.module.ts</code>에 있는 <code>RouterModule.forRoot</code>와 다르게 <code>RouterModule.forChild</code>를  사용하는 이유는 서비스에는 하나의 forRoot만 사용할 수 있기 때문입니다. forRoot를 사용시 에러가 발생합니다.</p>\n<p><code>app/presentation/views/auth/auth-routing.module.ts</code></p>\n<pre><code class=\"language-typescript\">import { NgModule } from &quot;@angular/core&quot;;\nimport { CommonModule } from &quot;@angular/common&quot;;\n\nimport { AuthRoutingModule } from &quot;./auth-routing.module&quot;;\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, AuthRoutingModule]\n})\nexport class AuthModule {}</code></pre>\n<h4 id=\"component-파일-생성\">component 파일 생성</h4>\n<p><code>ng g component(c) &lt;path&gt;</code> 명령어를 사용하여 component 파일을 생성할 수 있습니다.</p>\n<pre><code class=\"language-bash\">ng g component presentation/views/auth</code></pre>\n<pre><code class=\"language-doc\">- app/presentation/views/auth\n  - auth.component.html\n  - auth.component.scss\n  - auth.component.spec.ts\n  - auth.component.ts</code></pre>\n<p>모듈을 생성하고 실행해야합니다. 기본적으로 <code>path</code>에서 모듈 파일을 찾아서, 자동으로 <code>declarations</code>에 선언해주기 때문입니다. 만약 모듈을 찾을 수 없어 에러가 발생한다면 <code>--module</code> 옵션을 사용하요, 선언을 추가할 모듈을 지정할 수 있습니다.</p>\n<pre><code class=\"language-bash\">ng g component presentation/views/auth --module app.module</code></pre>\n<p><code>app.module.ts</code> 파일을 찾아가면, 자동으로 추가되어있는 것을 확인하실 수 있습니다.</p>\n<ul>\n<li>selector</li>\n<li>templateUrl</li>\n<li>styleUrl</li>\n</ul>\n<h3 id=\"애니메이션-적용하기\">애니메이션 적용하기</h3>\n<h2 id=\"간단한-프로토타입\">간단한 프로토타입</h2>\n"},"sourceMaps":null,"error":null,"hash":"2a6c81d03b076bef336c531e688ac4d1","cacheData":{}}